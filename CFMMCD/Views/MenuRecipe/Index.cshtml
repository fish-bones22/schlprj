@model CFMMCD.Models.ViewModel.MenuRecipeViewModel
@using CFMMCD.Models.ViewModel

@{
    int HasSearch = 0;
    if (TempData["SearchResult"] != null)
    {
        HasSearch = (int)TempData["SearchResult"];
    }
    ViewBag.Title = "Menu Recipe";
}


<h2>@ViewBag.Title</h2>
<!--Alerts-->
<div class="container">
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissable fade in">@TempData["ErrorMessage"]<button class="close" data-dismiss="alert" aria-label="close">&times;</button></div>
    }
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissable fade in">@TempData["SuccessMessage"]<button class="close" data-dismiss="alert" aria-label="close">&times;</button></div>
    }
</div>
<!--Main content starts here-->
<div class="form-horizontal">

    <div class="col-lg-12">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <div class="container-fluid">
                <div class="col-lg-2 label-container-left">
                    <label class="form-label" for="menu-item">Menu item/ Product name</label>
                </div>
                <div class="col-lg-7">
                    @Html.TextBoxFor(m => m.SearchItem, new { @class = "form-control" })
                    <div class="input-group float-right" style="padding-top:8px">
                        <label class="checkbox-inline form-label">
                            @Html.CheckBoxFor(m => m.InactiveItemsCb)Show inactive items
                        </label>
                    </div>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-1">
                    <button type="submit" class="btn btn-default"><span class="glyphicon glyphicon-search"></span>&nbsp;Search</button>
                </div>
            </div>
        }
    </div>

    <hr />

    <div class="col-lg-12">
        @using (Html.BeginForm("UpdateDelete", "MenuRecipe", FormMethod.Post, new { }))
        {
            <div class="container-fluid">
                <div class="col-lg-6">
                    <div class="form-group">
                        @Html.LabelFor(m => Model.RIRMIC, "Menu item code", new { @class = "form-label" })
                        @Html.DisplayFor(m => Model.RIRMIC, new { @class = "form-control" } )
                    </div>
                </div>

                <div class="col-lg-6">
                    <div class="form-group">
                        @Html.LabelFor(m => Model.MIMLON, "Menu item long name", new { @class = "form-label" })
                        @Html.DisplayFor(m => Model.MIMLON, new { @class = "form-control" })
                    </div>
                </div>

                <div class="col-lg-12">
                    <div class="form-group">
                        @Html.LabelFor(m => Model.MIMDSC, "Description", new { @class = "form-label" })
                        @Html.DisplayFor(m => Model.MIMDSC, new { @class = "form-control" })
                    </div>
                </div>
            </div>

            <hr/>

            <div class="container-fluid">
                <table class="table-hover table-responsive table">
                    <thead>
                        <tr>
                            <td></td>
                            <td>Raw item number</td>
                            <td>Raw item name</td>
                            <td>Factor</td>
                            <td>Price</td>
                            <td>Waste</td>
                            <td>Store attribute</td>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            if (Model.RecipeList != null || Model.RecipeList.Count() != 0)
                            {
                                for (int i = 0; i < Model.RecipeList.Count(); i++)
                                {
                                    <tr>
                                        <td></td>
                                        <td>
                                            <div class="input-group">
                                                @Html.TextBoxFor(m => Model.RecipeList[i].RIRRIC, new { @class = "form - control input-sm" })
                                                <div class="input-group-btn"><button class="btn btn-default"><span class="glyphicon-search"></span></button></div>
                                            </div>
                                        </td>
                                        <td> @Html.DisplayFor(m => Model.RecipeList[i].RIMRID, new { @class = "form-control input-sm" }) </td>
                                        <td> @Html.TextBoxFor(m => Model.RecipeList[i].RIRSFQ, new { @class = "form-control input-sm" }) </td>
                                        <td> @Html.TextBoxFor(m => Model.RecipeList[i].RIRMIC, new { @class = "form-control input-sm" }) </td>
                                        <td> @Html.DropDownListFor(m => Model.RecipeList[i].RIRMIC, new SelectList(new List<string>()), new { @class = "form-control" }) </td>
                                        <td> @Html.DropDownListFor(m => Model.RecipeList[i].RIRCWC, new SelectList(new List<Object>() {
                                            new { value = "0" , text = "Active"  },
                                            new { value = "1" , text = "Inactive" }}, new { @class = "form-control input-sm" }))
                                        </td>
                                        <td>@Html.DisplayFor(m => Model.RecipeList[i].STOATT, new { @class = "form-control input-sm" })</td>
                                    </tr>
                                }
                            }
                            <tr id="add-row">
                                <td></td>
                                <td colspan="6"><button class="btn btn-default btn-sm">Add raw item</button></td>
                            </tr>
                        }
                    </tbody>
                </table> 
            </div>

            <div class="form-inline bottom float" style="right:50px">
                <button type="submit" name="command" value="Save" class="btn btn-default">Save</button>
            </div>
                            }
    </div>
</div>

<!--Search result modal-->
<div class="modal fade" id="search-result-modal" role="dialog">
    <div class="modal-content">
        <div class="modal-header">
            <button class="close" data-dismiss="modal">&times;</button>
            <h4>Search results</h4>
        </div>
        @using (Html.BeginForm("DisplaySearchResult", "MenuRecipe", FormMethod.Post, new { }))
        {
            List<MenuItemMasterViewModel> MIMList = (List<MenuItemMasterViewModel>)Session["ViewModelList"];
            if (MIMList != null)
            {
                <div class="modal-body">
                    @{if (HasSearch == 1 && MIMList != null)
                    {
                        foreach (MenuItemMasterViewModel vm in MIMList)
                        {
                                <button type="submit" class="modal-item-select" name="value" value=@vm.MIMMIC>
                                    <div class="col-lg-3">
                                        @vm.MIMMIC
                                    </div>
                                    <div class="col-lg-9">
                                        @vm.MIMNAM
                                    </div>
                                </button>
                            }
                        }
                    }
                </div>
            }
        }
    </div>
</div>

<script>
    $(window).ready(function () {
        if (@HasSearch === 1) {
            $("#search-result-modal").modal('show');
        }
    });
</script>